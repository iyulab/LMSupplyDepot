name: Build and Deploy (Minimal)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies (essential only)
      run: |
        # Restore only essential projects without LLamaSharp dependencies
        dotnet restore src/LMSupplyDepots/LMSupplyDepots.csproj
        dotnet restore src/LMSupplyDepots.SDK/LMSupplyDepots.SDK.csproj
        dotnet restore src/LMSupplyDepots.CLI/LMSupplyDepots.CLI.csproj
        dotnet restore src/LMSupplyDepots.HostApp/LMSupplyDepots.HostApp.csproj

    - name: Run security scan on essential projects
      run: |
        echo "üõ°Ô∏è Running security scan on essential projects..."
        # Check vulnerabilities on projects without heavy dependencies
        for project in "src/LMSupplyDepots/LMSupplyDepots.csproj" "src/LMSupplyDepots.SDK/LMSupplyDepots.SDK.csproj" "src/LMSupplyDepots.CLI/LMSupplyDepots.CLI.csproj" "src/LMSupplyDepots.HostApp/LMSupplyDepots.HostApp.csproj"; do
          echo "Scanning $project..."
          dotnet list "$project" package --vulnerable --include-transitive || true
        done

  # Build and test essential components
  build-essential:
    runs-on: ubuntu-latest
    needs: security-scan
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-essential-${{ hashFiles('src/LMSupplyDepots*/*.csproj', 'Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-essential-

    - name: Build essential projects
      run: |
        echo "üî® Building essential projects (without LLamaSharp dependencies)..."

        # Build core library
        dotnet build src/LMSupplyDepots/LMSupplyDepots.csproj -c Release

        # Build SDK
        dotnet build src/LMSupplyDepots.SDK/LMSupplyDepots.SDK.csproj -c Release

        # Build CLI
        dotnet build src/LMSupplyDepots.CLI/LMSupplyDepots.CLI.csproj -c Release

        # Build ModelHub (lightweight)
        dotnet build src/LMSupplyDepots.ModelHub/LMSupplyDepots.ModelHub.csproj -c Release

        # Build Host components
        dotnet build src/LMSupplyDepots.Host/LMSupplyDepots.Host.csproj -c Release
        dotnet build src/LMSupplyDepots.HostApp/LMSupplyDepots.HostApp.csproj -c Release

    - name: Run unit tests (essential only)
      run: |
        echo "üß™ Running unit tests for essential components..."
        # Only run tests that don't require heavy dependencies
        if [ -f "src/LMSupplyDepots.Host.Tests/LMSupplyDepots.Host.Tests.csproj" ]; then
          dotnet test src/LMSupplyDepots.Host.Tests/LMSupplyDepots.Host.Tests.csproj -c Release \
            --logger "trx;LogFileName=host-test-results.trx" \
            --filter "Category=Unit|Category=MockTests" \
            --results-directory TestResults
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: essential-test-results
        path: TestResults/*.trx
        retention-days: 30

  # Build Docker images (only for deployable components)
  build-images:
    runs-on: ubuntu-latest
    needs: build-essential
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build lightweight HostApp image (without LLamaSharp for now)
    - name: Extract metadata (HostApp)
      id: meta-hostapp
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/hostapp
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,format=short

    - name: Build and push HostApp image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.hostapp
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta-hostapp.outputs.tags }}
        labels: ${{ steps.meta-hostapp.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SKIP_LLAMA_BACKENDS=true

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying essential components to staging..."
        echo "Note: LLamaSharp features will be added in future deployment"

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "üéâ Deploying essential components to production..."
        echo "Note: Full LLamaSharp integration will be handled separately"