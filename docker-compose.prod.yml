# LMSupplyDepots Production Environment
# Docker Compose configuration for production deployment

version: '3.8'

services:
  hostapp:
    build:
      context: .
      dockerfile: docker/Dockerfile.hostapp
    container_name: lmsupplydepots-hostapp-prod
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      # Model storage configuration
      - LM_SUPPLY_DEPOT_MODEL_PATH=/app/models
      # Database connection
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=lmsupplydepots;Username=lmsupplydepots;Password=${DB_PASSWORD}
      - ConnectionStrings__Redis=redis:6379
      # AI Service configurations (from secrets)
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - HUGGINGFACE_API_TOKEN_FILE=/run/secrets/huggingface_token
      # Logging configuration
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
    volumes:
      - models-data:/app/models:ro  # Read-only model data
      - logs-data:/app/logs
      - app-data:/app/data
    networks:
      - lmsupplydepots-internal
      - lmsupplydepots-public
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    secrets:
      - openai_api_key
      - huggingface_token
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 0s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: lmsupplydepots-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - logs-nginx:/var/log/nginx
    networks:
      - lmsupplydepots-public
    depends_on:
      - hostapp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Database
  postgres:
    image: postgres:16-alpine
    container_name: lmsupplydepots-postgres-prod
    environment:
      - POSTGRES_DB=lmsupplydepots
      - POSTGRES_USER=lmsupplydepots
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backups:/backups
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - lmsupplydepots-internal
    secrets:
      - db_password
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lmsupplydepots"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: lmsupplydepots-redis-prod
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - lmsupplydepots-internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: lmsupplydepots-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=lmsupplydepots
      - POSTGRES_USER=lmsupplydepots
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - BACKUP_RETENTION_DAYS=7
    volumes:
      - postgres-backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - lmsupplydepots-internal
    secrets:
      - db_password
    profiles:
      - backup
    restart: "no"
    command: ["sh", "-c", "chmod +x /usr/local/bin/backup.sh && /usr/local/bin/backup.sh"]

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lmsupplydepots-prometheus-prod
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - lmsupplydepots-internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  node-exporter:
    image: prom/node-exporter:latest
    container_name: lmsupplydepots-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - lmsupplydepots-internal
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

networks:
  lmsupplydepots-internal:
    driver: overlay
    internal: true
  lmsupplydepots-public:
    driver: overlay

volumes:
  postgres-data:
    driver: local
  postgres-backups:
    driver: local
  redis-data:
    driver: local
  models-data:
    driver: local
  logs-data:
    driver: local
  logs-nginx:
    driver: local
  app-data:
    driver: local
  prometheus-data:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  huggingface_token:
    file: ./secrets/huggingface_token.txt