# LMSupplyDepots Development Environment
# Docker Compose configuration for local development and testing

version: '3.8'

services:
  hostapp:
    build:
      context: .
      dockerfile: docker/Dockerfile.hostapp
    container_name: lmsupplydepots-hostapp
    ports:
      - "8080:8080"
      - "8081:8081"  # HTTPS port
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - ASPNETCORE_HTTPS_PORT=8081
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      # Model storage configuration
      - LM_SUPPLY_DEPOT_MODEL_PATH=/app/models
      # AI Service configurations
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN:-}
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
      - ~/.aspnet/https:/https:ro
    networks:
      - lmsupplydepots-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  cli:
    build:
      context: .
      dockerfile: docker/Dockerfile.cli
    container_name: lmsupplydepots-cli
    environment:
      - LM_SUPPLY_DEPOT_MODEL_PATH=/app/models
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN:-}
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - lmsupplydepots-network
    profiles:
      - cli
    entrypoint: ["tail", "-f", "/dev/null"]  # Keep container running for exec commands

  # Supporting services
  redis:
    image: redis:7-alpine
    container_name: lmsupplydepots-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - lmsupplydepots-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: lmsupplydepots-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=lmsupplydepots
      - POSTGRES_USER=lmsupplydepots
      - POSTGRES_PASSWORD=lmsupplydepots_dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - lmsupplydepots-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lmsupplydepots"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: lmsupplydepots-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - lmsupplydepots-network
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: lmsupplydepots-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lmsupplydepots-network
    profiles:
      - monitoring
    restart: unless-stopped

networks:
  lmsupplydepots-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local